<?xml version="1.0" encoding="UTF-8"?>
<actions>

<meta>
  <description>Template für die standardisierte PAIA-API</description>
  <variable name="baseurl"><description>Serverurl inkl. Protokol</description></variable>
  <variable name="server"><description>Serveraddresse (veraltet)</description></variable>
</meta>

<action id="connect">
  <s>baseurl := if (get("baseurl", ())) then get("baseurl", ()) else x"https://{get('server')}"</s>
  <try>
    <page url="{$baseurl}/auth/login?username={$username}&amp;password={$password}&amp;grant_type=password">
  <!--    <header>Content-Type: application/json</header>-->
      <header>Accept: application/json,*/*</header>
      <template><t:s>
        xquery version "1.0";
        let $answer := json($raw) return
        (
          access_token := encode-for-uri($answer.access_token),
          patron_identifier := encode-for-uri(if ($answer.patron) then $answer.patron else $username),
          scope := if ($answer.scope) then $answer.scope else "read_items write_items",
          allow_renew := contains(x" {$scope} ", " write_items "),
          if (not(contains(x" {$scope} ", " read_items "))) then ( error(QName("VL:1"), "No access" ) ) else ()        
        )
      </t:s></template>
    </page>
    <catch errors="http:403"><s>vl:raise-login("HTTP Code 403. Vermutlich ungültige Kontonummer oder Passwort.")</s></catch>
  </try>
</action>

<action id="update-all">
  <page url="{$baseurl}/core/{$patron_identifier}/items?access_token={$access_token}">
    <header>Accept: application/json,*/*</header>
    <template><t:s>
       answer := json($raw),
       if ($answer.error) then videlibri:raise(x"PAIA error on items: {$answer.code}: {$answer.error}: {$answer.error_description}") else (
         videlibri:delete-current-books(),
         for $doc in jn:members($answer.doc)[(.).status &lt; 5] return
           book := {
             "id": $doc.label,
             "title": $doc.about,
             "duedate": if ($doc.duedate) then parse-date($doc.duedate, if (substring($doc.duedate, 3, 1) = "-") then "dd-mm-yyyy" else "yyyy-mm-dd") else (),
             "status": if ($doc.renewals) then x"bisher {$doc.renewals}-mal verlängert" else (),
             "statusId": if ($doc.status = (1,2)) then "ordered"
                         else if ($doc.status = 4) then "provided"
                         else if ($doc.canrenew) then "curious" 
                         else "critical",
             "cancelable": $doc.cancancel,
             
             "item": $doc.item, 
             "edition": $doc.edition,
             "barcode": $doc.barcode 
           }
       )
    </t:s></template>
  </page>
</action>

<action id="renew-list">
  <!--<variable name="book-list">encode-for-uri(serialize-json([ 
        for $book in $renew-books return {
          "item": $book.item,
          "edition": $book.edition
        } ]))</variable>-->
  <page test="$allow_renew" url="{$baseurl}/core/{$patron_identifier}/renew?access_token={$access_token}" >
    <header>Content-Type: application/json; charset=utf-8</header>
    <header>Accept: application/json,*/*</header>
    <method>POST</method>
    <post>
    { serialize-json({ "doc":  
      for $book in $renew-books return {
        "item": $book.item,
        "edition": $book.edition,
        "barcode": $book.barcode
      }
    }) }
    </post> 
    <template>
    </template>
  </page>
  <call action="update-all"/>
</action>


</actions>
